[["index.html", "Learning GWAS One Step at a Time with R ", " Learning GWAS One Step at a Time with R Last updated: July 07, 2025 "],["welcome-to-cdi-gwas-for-population-health.html", "Welcome to CDI ‚Äì GWAS for Population Health", " Welcome to CDI ‚Äì GWAS for Population Health Welcome to the Genome-Wide Association Studies (GWAS) Q&amp;A Guide, part of the Complex Data Insights (CDI) series. GWAS is a powerful approach used to identify genetic variants linked to traits and diseases across populations. By scanning the entire genome, GWAS helps researchers uncover associations between specific genetic markers (like SNPs) and observable traits ‚Äî such as height, cholesterol levels, asthma, diabetes, cancer risk, etc. ‚Äî across diverse populations. This guide focuses on the data-driven steps involved in conducting GWAS, from quality control and population structure analysis to association testing and interpretation. Using real genotype‚Äìphenotype datasets, you‚Äôll gain hands-on experience with tools like PLINK, R, and Python. GWAS plays a central role in population health genomics, supporting risk prediction, public health research, and equitable precision medicine ‚Äî especially when studies include diverse populations. Whether you‚Äôre preparing datasets, interpreting results, or exploring research applications, this guide helps you build your skills ‚Äî one question at a time. üåê The CDI Learning Path This guide is part of the Complex Data Insights (CDI) learning system ‚Äî an open educational project that combines: üìò Free learning content, licensed under CC BY 4.0 (Creative Commons Attribution) üíª Code and scripts, licensed under the MIT License You‚Äôre free to use, adapt, and redistribute this material for personal, academic, or non-commercial purposes ‚Äî with proper attribution to Complex Data Insights (CDI). CDI breaks down complex topics into four progressive layers, designed to be explored individually or as an integrated journey: üîç EDA (Exploratory Data Analysis) Understand your data ‚Äî explore its structure, patterns, and quirks. üìä VIZ (Visualization) Communicate findings through clear and compelling visuals. üìê STATS (Statistical Analysis) Test hypotheses and quantify uncertainty using sound statistical methods. ü§ñ ML (Machine Learning) Build models to predict, classify, and uncover deeper insights. CDI helps you grow ‚Äî one Q&amp;A at a time. "],["how-do-you-create-a-gwas-project-directory-ready-for-analysis.html", "Q&A 1 How do you create a GWAS project directory ready for analysis? 1.1 Explanation 1.2 Bash (Terminal) 1.3 Python Code 1.4 R Code 1.5 Import libraries", " Q&A 1 How do you create a GWAS project directory ready for analysis? 1.1 Explanation Before working with data, it‚Äôs important to set up a clean and organized project directory. A consistent folder structure helps you manage scripts, datasets, and outputs across both Python and R ‚Äî making your work easier to follow and share. In this guide, we‚Äôll create a root directory called gwas-data-science with four folders: data/ ‚Äì for datasets scripts/ ‚Äì for code files images/ ‚Äì for plots and charts library/ ‚Äì for reusable functions Example Folder Structure: gwas-data-science/ ‚îú‚îÄ‚îÄ data/ ‚îú‚îÄ‚îÄ scripts/ ‚îú‚îÄ‚îÄ images/ ‚îî‚îÄ‚îÄ library/ 1.2 Bash (Terminal) You can create the entire structure using this single command: mkdir -p gwas-data-science/{data,scripts,images,library} cd gwas-data-science 1.3 Python Code You can also create the same folder structure in Python: import os folders = [&quot;data&quot;, &quot;scripts&quot;, &quot;images&quot;, &quot;library&quot;] root = &quot;gwas-data-science&quot; os.makedirs(root, exist_ok=True) for folder in folders: os.makedirs(os.path.join(root, folder), exist_ok=True) print(f&quot;Created &#39;{root}&#39; project folder with subdirectories.&quot;) 1.4 R Code Here‚Äôs how to do it in R: folders &lt;- c(&quot;data&quot;, &quot;scripts&quot;, &quot;images&quot;, &quot;library&quot;) root &lt;- &quot;gwas-data-science&quot; if (!dir.exists(root)) dir.create(root) for (folder in folders) { dir.create(file.path(root, folder), showWarnings = FALSE) } cat(&quot;Created&quot;, root, &quot;project folder with subdirectories.\\n&quot;) ‚úÖ A clean project directory helps you stay organized, reuse code, and avoid errors ‚Äî it‚Äôs the first step toward reproducible, professional data science. 1.5 Import libraries library(tidyverse) library(rrBLUP) library(BGLR) library(DT) library(SNPRelate) library(qqman) library(poolr) "],["how-do-you-prepare-a-public-gwas-dataset-for-r-based-analysis.html", "Q&A 2 How do you prepare a public GWAS dataset for R-based analysis? 2.1 Explanation 2.2 Bash Script 2.3 File Structure", " Q&A 2 How do you prepare a public GWAS dataset for R-based analysis? 2.1 Explanation To support reproducible and cross-platform workflows, it‚Äôs helpful to separate raw data preparation from your analysis code. In this example, we use a Bash script to download and organize a publicly available rice diversity panel dataset from Zhao et al., 2011. The script performs the following steps: üì• Downloads PLINK-formatted genotype files (.ped, .map, .fam) üì¶ Unzips and flattens the directory structure for easy access üè∑Ô∏è Renames the phenotype file for clarity (sativa413_phenotypes.txt) üìÅ Moves all outputs into a consistent data/ directory with a sativa413_ prefix This setup creates a clean and well-organized foundation for downstream R-based GWAS analysis. 2.2 Bash Script #!/bin/bash # üöÄ Prepare rice GWAS genotype and phenotype data (PLINK format) # --- Paths and filenames --- ZIP_URL=&quot;http://ricediversity.org/data/sets/44kgwas/RiceDiversity.44K.MSU6.Genotypes_PLINK.zip&quot; ZIP_FILE=&quot;data/rice_gwas_genotypes.zip&quot; EXTRACT_DIR=&quot;data/RiceDiversity_44K_Genotypes_PLINK&quot; PHENO_URL=&quot;http://www.ricediversity.org/data/sets/44kgwas/RiceDiversity_44K_Phenotypes_34traits_PLINK.txt&quot; PHENO_OUT=&quot;data/sativa413_phenotypes.txt&quot; # --- Step 1: Ensure data folder exists --- mkdir -p data # --- Step 2: Download genotype zip file (if not already present) --- if [ ! -f &quot;$ZIP_FILE&quot; ]; then echo &quot;‚¨áÔ∏è Downloading genotype data...&quot; wget --no-check-certificate -O &quot;$ZIP_FILE&quot; &quot;$ZIP_URL&quot; else echo &quot;‚úÖ Genotype zip already exists: $ZIP_FILE&quot; fi # --- Step 3: Unzip genotype data --- echo &quot;üìÇ Extracting genotype files...&quot; unzip -o &quot;$ZIP_FILE&quot; -d data/ # --- Step 4: Move files up and clean nested folder --- if [ -d &quot;$EXTRACT_DIR&quot; ]; then mv &quot;$EXTRACT_DIR&quot;/* data/ rm -rf &quot;$EXTRACT_DIR&quot; fi rm -rf data/__MACOSX rm -f &quot;$ZIP_FILE&quot; # --- Step 5: Download phenotype file and rename --- echo &quot;‚¨áÔ∏è Downloading phenotype file...&quot; wget --no-check-certificate -P data/ &quot;$PHENO_URL&quot; mv data/RiceDiversity_44K_Phenotypes_34traits_PLINK.txt &quot;$PHENO_OUT&quot; echo &quot;‚úÖ GWAS data successfully prepared in the data/ folder.&quot; The Bash script is saved as: script/gwas_data.sh To run it: bash script/gwas_data.sh 2.3 File Structure After execution, the data/ folder contains: project/ ‚îú‚îÄ‚îÄ script/ ‚îÇ ‚îî‚îÄ‚îÄ gwas_data.sh ‚îî‚îÄ‚îÄ data/ ‚îú‚îÄ‚îÄ sativa413.map ‚îú‚îÄ‚îÄ sativa413.ped ‚îú‚îÄ‚îÄ sativa413.fam ‚îî‚îÄ‚îÄ sativa413_phenotypes.txt ‚úÖ Takeaway: Using a Bash script to automate dataset download and organization keeps your R analysis environment clean, standardized, and fully reproducible. All required files are now available in the data/ folder under the sativa413_ prefix. "],["how-do-you-efficiently-load-and-store-gwas-data-files-in-r.html", "Q&A 3 How do you efficiently load and store GWAS data files in R? 3.1 Explanation 3.2 R Code", " Q&A 3 How do you efficiently load and store GWAS data files in R? 3.1 Explanation GWAS datasets can be large, especially the genotype file in .ped format, which stores two columns per SNP. Repeatedly reading this file is time-consuming, so it‚Äôs best to: Load it once using readr::read_table() for speed and consistency. Save the loaded object as a compressed .rds file for fast future access. Load supporting metadata files (.map, .fam) and phenotype data using consistent column names. All files are stored in the data/ directory and prefixed with sativa413_. 3.2 R Code library(tidyverse) # Step 1: Load genotype data using readr ped_data &lt;- read_table(&quot;data/sativa413.ped&quot;, col_names = FALSE, show_col_types = FALSE) # Step 2: Save as compressed RDS file write_rds(ped_data, file = &quot;data/sativa413.rds&quot;) # Step 3: Load metadata files map_data &lt;- read_table(&quot;data/sativa413.map&quot;, col_names = c(&quot;chr&quot;, &quot;snp_id&quot;, &quot;gen_dist&quot;, &quot;bp_pos&quot;), show_col_types = FALSE) fam_data &lt;- read_table(&quot;data/sativa413.fam&quot;, col_names = c(&quot;FID&quot;, &quot;IID&quot;, &quot;PID&quot;, &quot;MID&quot;, &quot;sex&quot;, &quot;phenotype&quot;), show_col_types = FALSE) phenotype_data &lt;- read_tsv(&quot;data/sativa413_phenotypes.txt&quot;, show_col_types = FALSE) ‚úÖ Takeaway: For large genotype files, load once using readr, save as .rds, and always use clear column names when importing metadata and phenotype files to streamline analysis and ensure reproducibility. "],["how-do-you-inspect-the-structure-and-contents-of-gwas-input-files-in-r.html", "Q&A 4 How do you inspect the structure and contents of GWAS input files in R? 4.1 Explanation 4.2 R Code", " Q&A 4 How do you inspect the structure and contents of GWAS input files in R? 4.1 Explanation Before analysis, it‚Äôs essential to preview each file to check: Row and column dimensions Sample ID consistency General format of genotype and phenotype data This ensures everything is aligned before tidying or merging. 4.2 R Code # Load genotype file (if needed) ped_data &lt;- read_rds(&quot;data/sativa413.rds&quot;) # Check size of each file dim(ped_data) # Genotype matrix [1] 413 73808 dim(map_data) # SNP metadata [1] 36901 4 dim(fam_data) # Sample info [1] 413 6 dim(phenotype_data) # Trait info [1] 413 38 # Preview first few rows and columns head(ped_data[, 1:5]) # First 5 genotype columns (show alleles) # A tibble: 6 √ó 5 X1 X2 X3 X4 X5 &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 081215-A05 1 0 0 -9 2 081215-A06 3 0 0 -9 3 081215-A07 4 0 0 -9 4 081215-A08 5 0 0 -9 5 090414-A09 6 0 0 -9 6 090414-A10 7 0 0 -9 head(map_data) # A tibble: 6 √ó 4 chr snp_id gen_dist bp_pos &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 id1000001 0 13147 2 1 id1000003 0 73192 3 1 id1000005 0 74969 4 1 id1000007 0 75852 5 1 id1000008 0 75953 6 1 id1000011 0 91016 head(fam_data[, 1:5]) # A tibble: 6 √ó 5 FID IID PID MID sex &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 081215-A05 1 0 0 -9 2 081215-A06 3 0 0 -9 3 081215-A07 4 0 0 -9 4 081215-A08 5 0 0 -9 5 090414-A09 6 0 0 -9 6 090414-A10 7 0 0 -9 head(phenotype_data[, 1:5]) # A tibble: 6 √ó 5 HybID NSFTVID `Flowering time at Arkansas` `Flowering time at Faridpur` &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 081215-A05 1 75.1 64 2 081215-A06 3 89.5 66 3 081215-A07 4 94.5 67 4 081215-A08 5 87.5 70 5 090414-A09 6 89.1 73 6 090414-A10 7 105 NA # ‚Ñπ 1 more variable: `Flowering time at Aberdeen` &lt;dbl&gt; ‚úÖ Takeaway: Use dim() and head() to quickly check file structure and confirm that samples and traits align before transforming or analyzing GWAS data. "],["how-do-you-tidy-the-genotype-matrix-from-a-.ped-file-in-r.html", "Q&A 5 How do you tidy the genotype matrix from a .ped file in R? 5.1 Explanation 5.2 R Code", " Q&A 5 How do you tidy the genotype matrix from a .ped file in R? 5.1 Explanation PLINK .ped files store genotype data in a wide format, where each SNP is represented by two columns per individual (one for each allele). This structure is inefficient for downstream analysis, so we convert it to a tidy format where: Each row represents one sample Each column represents one SNP Alleles are combined (e.g., \"A A\", \"A G\", \"G G\") We also use SNP metadata from the .map file ‚Äî now consistently referred to as snp_info ‚Äî to label the columns. 5.2 R Code # Load necessary library library(tidyverse) # Step 1: Load genotype and SNP info (if not already in memory) ped_data &lt;- read_rds(&quot;data/sativa413.rds&quot;) snp_info &lt;- read_table(&quot;data/sativa413.map&quot;, col_names = c(&quot;chr&quot;, &quot;snp_id&quot;, &quot;gen_dist&quot;, &quot;bp_pos&quot;), show_col_types = FALSE) # Step 2: Separate sample IDs and genotype calls sample_ids &lt;- ped_data[, 1:2] # FID and IID genotype_matrix &lt;- ped_data[, -(1:6)] # Alleles only # Step 3: Verify expected SNP count n_snps &lt;- ncol(genotype_matrix) / 2 stopifnot(n_snps == nrow(snp_info)) # Step 4: Combine each pair of allele columns into genotype strings genotype_calls &lt;- map_dfc(seq(1, ncol(genotype_matrix), by = 2), function(i) { paste(genotype_matrix[[i]], genotype_matrix[[i + 1]]) }) names(genotype_calls) &lt;- snp_info$snp_id # Use SNP IDs as column names # Step 5: Combine with sample IDs genotype_tidy &lt;- bind_cols(sample_ids, genotype_calls) # Step 6: Preview output head(genotype_tidy[1:10, 1:5]) # Show FID, IID, and first 8 SNPs # A tibble: 6 √ó 5 X1 X2 id1000001 id1000003 id1000005 &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 081215-A05 1 T T T T C C 2 081215-A06 3 C C C C C C 3 081215-A07 4 C C C C C C 4 081215-A08 5 C C C C T T 5 090414-A09 6 C C C C C C 6 090414-A10 7 T T T T C C glimpse(genotype_tidy[1:5, 1:10]) # Show FID, IID, and first 8 SNPs Rows: 5 Columns: 10 $ X1 &lt;chr&gt; &quot;081215-A05&quot;, &quot;081215-A06&quot;, &quot;081215-A07&quot;, &quot;081215-A08&quot;, &quot;090‚Ä¶ $ X2 &lt;dbl&gt; 1, 3, 4, 5, 6 $ id1000001 &lt;chr&gt; &quot;T T&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot; $ id1000003 &lt;chr&gt; &quot;T T&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot; $ id1000005 &lt;chr&gt; &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;T T&quot;, &quot;C C&quot; $ id1000007 &lt;chr&gt; &quot;G G&quot;, &quot;A A&quot;, &quot;A A&quot;, &quot;G G&quot;, &quot;A A&quot; $ id1000008 &lt;chr&gt; &quot;T T&quot;, &quot;G G&quot;, &quot;G G&quot;, &quot;G G&quot;, &quot;G G&quot; $ id1000011 &lt;chr&gt; &quot;A A&quot;, &quot;0 0&quot;, &quot;G G&quot;, &quot;A A&quot;, &quot;G G&quot; $ id1000013 &lt;chr&gt; &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;T T&quot;, &quot;C C&quot; $ id1000015 &lt;chr&gt; &quot;T T&quot;, &quot;G G&quot;, &quot;G G&quot;, &quot;G G&quot;, &quot;G G&quot; ‚úÖ Takeaway: Tidying .ped genotype data into a clean sample-by-SNP format makes it much easier to analyze, visualize, or convert to numeric dosages. Use snp_info consistently as the SNP metadata reference to avoid conflicts. "],["how-do-you-recode-allele-strings-into-numeric-count-format-for-gwas.html", "Q&A 6 How do you recode allele strings into numeric count format for GWAS? 6.1 Explanation 6.2 R Code", " Q&A 6 How do you recode allele strings into numeric count format for GWAS? 6.1 Explanation After tidying the .ped genotype matrix into a clean format where each SNP column contains values like \"A A\", \"A G\", or \"G G\", most GWAS tools require those genotypes to be numeric: Genotype count format: - 0 = Homozygous for major allele - 1 = Heterozygous - 2 = Homozygous for minor allele - NA = Missing or uncalled genotype To do this, we: Identify the two alleles observed at each SNP Determine the minor allele (less frequent) Count how many copies of the minor allele each individual has (0, 1, or 2) ‚úÖ Clarifying the structure of the genotype matrix: Each pair of alleles (like \"A G\", \"G G\", \"T C\") represents a genotype for a single SNP in a single individual. So when you load the .ped file and separate it into allele pairs: Each pair = one genotype Each column = one SNP Each row = one sample üß† This distinction is important when converting genotype strings to numeric formats for GWAS. 6.2 R Code # Load libraries library(tidyverse) # Step 1: Drop FID and IID from genotype_tidy to isolate genotype columns geno_alleles &lt;- genotype_tidy[, -c(1, 2)] # Step 2: Convert allele strings to numeric minor allele counts geno_minor_allele_count &lt;- map_dfc(geno_alleles, function(allele_vec) { # Split all genotype strings (e.g., &quot;A G&quot;) into individual alleles alleles &lt;- unlist(str_split(allele_vec, &quot; &quot;)) allele_counts &lt;- table(alleles) # Skip SNPs that are monomorphic or malformed if (length(allele_counts) &lt; 2) return(rep(NA, length(allele_vec))) # Identify the minor allele (less frequent) minor_allele &lt;- names(sort(allele_counts))[1] # Count how many copies of the minor allele are in each genotype sapply(allele_vec, function(gt) { if (gt %in% c(&quot;0 0&quot;, &quot;0 1&quot;, &quot;1 0&quot;, &quot;1 1&quot;, &quot;0&quot;, &quot;1&quot;)) return(NA) # filter malformed split_alleles &lt;- unlist(str_split(gt, &quot; &quot;)) if (length(split_alleles) != 2) return(NA) sum(split_alleles == minor_allele) }) }) # Step 3: Add back sample identifiers genotype_count &lt;- bind_cols(genotype_tidy[, 1:2], geno_minor_allele_count) # Step 4: Preview the cleaned matrix glimpse(genotype_count[, 1:5]) Rows: 413 Columns: 5 $ X1 &lt;chr&gt; &quot;081215-A05&quot;, &quot;081215-A06&quot;, &quot;081215-A07&quot;, &quot;081215-A08&quot;, &quot;090‚Ä¶ $ X2 &lt;dbl&gt; 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, ‚Ä¶ $ id1000001 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶ $ id1000003 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶ $ id1000005 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶ ‚úÖ Takeaway: Recoding genotype strings into numeric dosages (0, 1, 2) is essential for statistical GWAS models. It standardizes input and prepares your data for PCA, association testing, or genomic prediction. "],["how-do-you-filter-snps-and-samples-based-on-missing-data-and-minor-allele-frequency.html", "Q&A 7 How do you filter SNPs and samples based on missing data and minor allele frequency? 7.1 Explanation 7.2 R Code", " Q&A 7 How do you filter SNPs and samples based on missing data and minor allele frequency? 7.1 Explanation Before running GWAS, it‚Äôs important to apply basic quality control (QC) to the genotype matrix. This ensures that: SNPs with too many missing genotypes are excluded SNPs with very low variability (low minor allele frequency) are removed Samples with excessive missing data (optional) are filtered out These steps improve statistical power and reduce false associations. 7.2 R Code # Load required libraries library(tidyverse) # Step 1: Remove sample columns (FID, IID) count_only &lt;- genotype_count[, -c(1, 2)] # Step 2: Filter SNPs by missingness (e.g., keep SNPs with &lt;10% missing values) snp_missing &lt;- colMeans(is.na(count_only)) snp_keep &lt;- names(snp_missing[snp_missing &lt; 0.1]) filtered_count &lt;- count_only[, snp_keep] # Step 3: Filter SNPs by minor allele frequency (MAF &gt;= 0.05) calc_maf &lt;- function(x) { p &lt;- mean(x, na.rm = TRUE) / 2 min(p, 1 - p) } snp_maf &lt;- map_dbl(filtered_count, calc_maf) maf_keep &lt;- names(snp_maf[snp_maf &gt;= 0.05]) final_count &lt;- filtered_count[, maf_keep] # Step 4: Reattach FID and IID filtered_geno &lt;- bind_cols(genotype_count[, 1:2], final_count) # Step 5: Summary of filtering cat(&quot;Original SNPs:&quot;, ncol(count_only), &quot;\\n&quot;) Original SNPs: 36901 cat(&quot;After missing filter:&quot;, length(snp_keep), &quot;\\n&quot;) After missing filter: 31443 cat(&quot;After MAF filter:&quot;, length(maf_keep), &quot;\\n&quot;) After MAF filter: 3755 ‚úÖ Takeaway: Apply SNP-level filters for missing data and low MAF to improve data quality. This ensures that only informative and reliable markers are used in your GWAS analysis. "],["how-do-you-impute-missing-genotype-values-before-gwas-analysis.html", "Q&A 8 How do you impute missing genotype values before GWAS analysis? 8.1 Explanation 8.2 R Code", " Q&A 8 How do you impute missing genotype values before GWAS analysis? 8.1 Explanation Many GWAS and population structure methods (like PCA or kinship matrix computation) require complete genotype matrices. If you have filtered for missingness but still have a few NA values, a simple approach is to impute missing genotypes using the mean dosage for each SNP. This is fast, reproducible, and good enough for visualization and many linear models. 8.2 R Code # Load library library(tidyverse) # Step 1: Extract dosage matrix (without FID/IID) dosage_matrix &lt;- filtered_geno[, -c(1, 2)] # Step 2: Impute missing values using column means imputed_matrix &lt;- dosage_matrix %&gt;% mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) # Step 3: Add back FID and IID geno_imputed &lt;- bind_cols(filtered_geno[, 1:2], imputed_matrix) # Step 4: Preview head(geno_imputed[, 1:5]) # A tibble: 6 √ó 5 X1 X2 id1000007 id1000051 id1000080 &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; 1 081215-A05 1 0 0 0 2 081215-A06 3 2 0 2 3 081215-A07 4 2 0 2 4 081215-A08 5 0 0 2 5 090414-A09 6 2 0 2 6 090414-A10 7 0 0 0 glimpse(geno_imputed[1:5, 1:10]) Rows: 5 Columns: 10 $ X1 &lt;chr&gt; &quot;081215-A05&quot;, &quot;081215-A06&quot;, &quot;081215-A07&quot;, &quot;081215-A08&quot;, &quot;090‚Ä¶ $ X2 &lt;dbl&gt; 1, 3, 4, 5, 6 $ id1000007 &lt;int&gt; 0, 2, 2, 0, 2 $ id1000051 &lt;int&gt; 0, 0, 0, 0, 0 $ id1000080 &lt;int&gt; 0, 2, 2, 2, 2 $ id1000091 &lt;int&gt; 0, 2, 2, 0, 2 $ id1000093 &lt;int&gt; 0, 2, 2, 2, 2 $ id1000115 &lt;int&gt; 0, 0, 0, 2, 0 $ ud1000033 &lt;dbl&gt; 0, 0, 0, 0, 0 $ id1000264 &lt;int&gt; 0, 2, 0, 0, 0 ‚úÖ Takeaway: Simple mean imputation fills missing genotype values efficiently. It‚Äôs suitable for PCA, kinship, and linear models when high accuracy isn‚Äôt critical or when advanced imputation isn‚Äôt available. "],["how-do-you-perform-pca-on-genotype-data-to-assess-population-structure.html", "Q&A 9 How do you perform PCA on genotype data to assess population structure? 9.1 Explanation 9.2 R Code", " Q&A 9 How do you perform PCA on genotype data to assess population structure? 9.1 Explanation PCA (Principal Component Analysis) is a standard method to explore genetic diversity and detect hidden population structure in GWAS datasets. It helps: Control for confounding due to stratification Visualize sample clusters or outliers Generate covariates (PC1, PC2, etc.) for use in association models We apply PCA on the imputed genotype dosage matrix, excluding identifier columns (FID, IID), and then combine the results with sample IDs. 9.2 R Code # Load libraries library(tidyverse) # Step 1: Extract genotype matrix (exclude FID and IID) geno_numeric &lt;- geno_imputed[, -c(1, 2)] # Step 2: Perform PCA using prcomp pca_result &lt;- prcomp(geno_numeric, center = TRUE, scale. = TRUE) # Step 3: Combine first 5 PCs with sample IDs pca_df &lt;- geno_imputed[, 1:2] %&gt;% # FID and IID bind_cols(as_tibble(pca_result$x[, 1:5])) # PC1 to PC5 # Step 4: Plot PC1 vs PC2 ggplot(pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 2, alpha = 0.7) + labs(title = &quot;PCA of Genotype Data&quot;, x = &quot;PC1&quot;, y = &quot;PC2&quot;) + theme_minimal() ‚úÖ Takeaway: PCA helps uncover hidden structure in your GWAS population. Always reattach FID and IID to PCA scores so they can be merged with phenotype and genotype metadata for downstream modeling. "],["how-do-you-include-pca-covariates-in-a-gwas-model.html", "Q&A 10 How do you include PCA covariates in a GWAS model? 10.1 Explanation 10.2 R Code", " Q&A 10 How do you include PCA covariates in a GWAS model? 10.1 Explanation To reduce false positives caused by hidden genetic structure, it‚Äôs standard in GWAS to include the top principal components (PCs) as covariates in the model. These PCs come from PCA applied to the genotype matrix and must be matched back to each sample using the same identifiers (FID, IID). This Q&amp;A walks through the process of combining phenotype, PCA, and genotype data, then fitting a single SNP-trait association model. 10.2 R Code # Load libraries library(tidyverse) # Step 1: Load and align phenotype data with sample metadata (by FID) fam_data &lt;- read_table(&quot;data/sativa413.fam&quot;, col_names = c(&quot;FID&quot;, &quot;IID&quot;, &quot;PID&quot;, &quot;MID&quot;, &quot;sex&quot;, &quot;phenotype&quot;), show_col_types = FALSE) phenotype_data &lt;- read_tsv(&quot;data/sativa413_phenotypes.txt&quot;, show_col_types = FALSE) %&gt;% rename(FID = 1) # Sample IDs in phenotype file match fam_data$FID sample_metadata &lt;- left_join(fam_data, phenotype_data, by = &quot;FID&quot;) # Step 2: Rename PCA columns to include proper IDs pca_df &lt;- pca_df %&gt;% rename(FID = 1, IID = 2) # Step 3: Merge PCA data into sample metadata sample_data &lt;- left_join(sample_metadata, pca_df, by = c(&quot;FID&quot;, &quot;IID&quot;)) # Step 4: Standardize ID columns in genotype data geno_imputed &lt;- geno_imputed %&gt;% rename(FID = 1, IID = 2) # Step 5: Merge genotype with metadata geno_data &lt;- geno_imputed[, -1] # Drop FID, keep IID and SNPs gwas_input &lt;- left_join(sample_data, geno_data, by = &quot;IID&quot;) # Step 6: Select trait and covariates trait &lt;- &quot;Plant height&quot; # Use the column name as a string covariates &lt;- c(&quot;PC1&quot;, &quot;PC2&quot;, &quot;PC3&quot;) # Save the merged GWAS input to an RDS file for future use saveRDS(gwas_input, file = &quot;data/gwas_input.rds&quot;) # Step 7: Construct the model formula snp_name &lt;- names(geno_data)[2] # Replace with desired SNP formula_str &lt;- paste0(&quot;`&quot;, trait, &quot;` ~ &quot;, snp_name, &quot; + &quot;, paste(covariates, collapse = &quot; + &quot;)) model &lt;- lm(as.formula(formula_str), data = gwas_input) # Step 8: View model summary summary(model) Call: lm(formula = as.formula(formula_str), data = gwas_input) Residuals: Min 1Q Median 3Q Max -54.024 -12.429 -0.346 11.594 76.555 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 115.83448 1.04707 110.627 &lt; 2e-16 *** id1000007 2.17767 1.54100 1.413 0.158 PC1 0.20502 0.02761 7.426 7.49e-13 *** PC2 -0.19534 0.04436 -4.404 1.39e-05 *** PC3 -0.29738 0.07399 -4.019 7.05e-05 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 18.63 on 378 degrees of freedom (30 observations deleted due to missingness) Multiple R-squared: 0.2277, Adjusted R-squared: 0.2195 F-statistic: 27.86 on 4 and 378 DF, p-value: &lt; 2.2e-16 ‚úÖ Takeaway: Always ensure PCA scores include correctly labeled FID and IID so they can be merged with metadata and genotype matrices before fitting GWAS models. "],["how-do-you-interpret-gwas-model-results-with-pca-covariates.html", "Q&A 11 How do you interpret GWAS model results with PCA covariates? 11.1 Explanation 11.2 R Model Output Summary", " Q&A 11 How do you interpret GWAS model results with PCA covariates? 11.1 Explanation Once a GWAS model is fitted using a phenotype (e.g., Plant height), a SNP, and population structure covariates (e.g., PC1‚ÄìPC3), we interpret the results using the model summary. The key values to look for are: Estimate: The effect size of each variable Pr(&gt;|t|): The p-value, used to determine significance R-squared: The proportion of variation in the trait explained by the model Residuals: The spread of errors not explained by the model This example tests the association between SNP id1000007 and Plant height, adjusting for PC1 to PC3. 11.2 R Model Output Summary Coefficient Estimate Std. Error t value Pr(&gt; t (Intercept) 115.83448 1.04707 110.63 &lt; 2e-16 *** id1000007 2.17767 1.54100 1.413 0.158 PC1 0.20502 0.02761 7.426 7.49e-13 *** PC2 -0.19534 0.04436 -4.404 1.39e-05 *** PC3 -0.29738 0.07399 -4.019 7.05e-05 *** Model Fit: Residual standard error: 18.63 Degrees of freedom: 378 R-squared: 0.2277 Adjusted R-squared: 0.2195 F-statistic: 27.86 on 4 and 378 DF Overall p-value: &lt; 2.2e-16 ‚úÖ Takeaway: This SNP is not significant (p = 0.158), but PCs show strong association with plant height. Controlling for population structure is essential to avoid false signals in GWAS. "],["how-do-you-perform-a-genome-wide-snp-scan-to-generate-gwas-results.html", "Q&A 12 How do you perform a genome-wide SNP scan to generate GWAS results? 12.1 Explanation 12.2 R Code", " Q&A 12 How do you perform a genome-wide SNP scan to generate GWAS results? 12.1 Explanation Once you‚Äôve merged your phenotype, PCA covariates, and genotype matrix into a single data frame (gwas_input), you can perform a genome-wide association scan. This involves fitting a linear model for each SNP, adjusting for population structure (e.g., PCs), and extracting the effect size and p-value for each SNP. These results are saved in a table for downstream visualization using Manhattan or QQ plots. Each model looks like: Plant height ~ PC1 + PC2 + PC3 + SNP_i We loop over all SNP columns in the dataset that match known prefixes (id, ud, wd, dd, fd) and collect the outputs. 12.2 R Code # Load required package library(tidyverse) # Step 1: Identify SNP columns using prefix pattern snp_cols &lt;- grep(&quot;^(id|ud|wd|dd|fd)[0-9]+$&quot;, names(gwas_input), value = TRUE) # Step 2: Check number of SNPs selected length(snp_cols) # Should return 3755 [1] 3755 head(snp_cols, 5) # Preview first 5 SNPs [1] &quot;id1000007&quot; &quot;id1000051&quot; &quot;id1000080&quot; &quot;id1000091&quot; &quot;id1000093&quot; # Step 3: Initialize list to collect GWAS results gwas_results &lt;- list() # Step 4: Loop over each SNP and fit linear model for (snp in snp_cols) { # Construct formula dynamically formula &lt;- as.formula(paste(&quot;`Plant height` ~ PC1 + PC2 + PC3 +&quot;, snp)) # Fit model safely model &lt;- tryCatch( lm(formula, data = gwas_input), error = function(e) NULL ) # Step 5: If successful, extract coefficient and p-value if (!is.null(model)) { coef_table &lt;- summary(model)$coefficients snp_row &lt;- tail(rownames(coef_table), 1) gwas_results[[snp]] &lt;- tibble( SNP = snp, Estimate = coef_table[snp_row, &quot;Estimate&quot;], P_value = coef_table[snp_row, &quot;Pr(&gt;|t|)&quot;] ) } } # Step 6: Combine results and sort by p-value gwas_df &lt;- bind_rows(gwas_results) %&gt;% arrange(P_value) # Step 7: Save the GWAS results for visualization write_csv(gwas_df, &quot;data/gwas_results.csv&quot;) # Step 8: Preview top hits head(gwas_df, 10) # A tibble: 10 √ó 3 SNP Estimate P_value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 id1024159 -16.6 7.55e-19 2 ud10000717 19.6 2.02e-14 3 id10003000 17.7 1.10e-13 4 id6000791 11.9 1.40e-12 5 id3010870 -12.2 1.50e-12 6 id2014431 19.3 3.05e-12 7 id1024488 11.5 3.51e-12 8 id11001027 14.5 3.53e-12 9 id1020565 -14.8 5.70e-12 10 id2001618 14.3 1.04e-11 ‚úÖ Takeaway: This loop scans 3,755 SNPs genome-wide and outputs a clean summary table with effect sizes and p-values ‚Äî ready for visualization using Manhattan and QQ plots. "],["how-do-you-create-a-manhattan-plot-from-gwas-results-using-the-ggplot2-package.html", "Q&A 13 How do you create a Manhattan plot from GWAS results using the ggplot2 package? 13.1 Explanation 13.2 R Code", " Q&A 13 How do you create a Manhattan plot from GWAS results using the ggplot2 package? 13.1 Explanation A Manhattan plot visualizes the results of a genome-wide association study (GWAS) by plotting each SNP‚Äôs chromosomal position against the ‚Äìlog10(p-value) of its association with a trait. High peaks represent SNPs with strong associations. To create a Manhattan plot using the ggplot2 package: You must first merge the GWAS result table with SNP position data (e.g., from a .map file). The ‚Äìlog10(p-value) is computed to scale the plot. Cumulative genomic positions are calculated to plot SNPs across chromosomes on a continuous axis. Alternating colors help visually separate chromosomes. 13.2 R Code # Load required libraries library(tidyverse) # Step 1: Load GWAS results and SNP position data gwas_df &lt;- read_csv(&quot;data/gwas_results.csv&quot;) map_df &lt;- read_tsv(&quot;data/sativa413.map&quot;, col_names = c(&quot;CHR&quot;, &quot;SNP&quot;, &quot;GEN_DIST&quot;, &quot;BP_POS&quot;), show_col_types = FALSE) # Step 2: Merge GWAS results with chromosome position gwas_annotated &lt;- left_join(gwas_df, map_df, by = &quot;SNP&quot;) %&gt;% drop_na() # Remove SNPs with missing position # Step 3: Compute cumulative position for plotting across chromosomes gwas_annotated &lt;- gwas_annotated %&gt;% arrange(CHR, BP_POS) %&gt;% group_by(CHR) %&gt;% mutate(BP_CUM = BP_POS + ifelse(row_number() == 1, 0, lag(cumsum(BP_POS), default = 0))) %&gt;% ungroup() # Step 4: Compute ‚Äìlog10(p-value) and color group gwas_annotated &lt;- gwas_annotated %&gt;% mutate(logP = -log10(P_value), CHR = as.factor(CHR), color_group = as.integer(CHR) %% 2) # Step 5: Plot Manhattan plot ggplot(gwas_annotated, aes(x = BP_CUM, y = logP, color = as.factor(color_group))) + geom_point(alpha = 0.7, size = 1.2) + scale_color_manual(values = c(&quot;#003b4a&quot;, &quot;dodgerblue&quot;)) + labs(title = &quot;Manhattan Plot Using ggplot2&quot;, x = &quot;Genomic Position&quot;, y = expression(-log[10](p))) + theme_minimal(base_size = 14) + theme(legend.position = &quot;none&quot;, panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) ‚úÖ Takeaway: The ggplot2 package allows full control over layout, color, and formatting when visualizing SNP‚Äìtrait associations across the genome in a Manhattan plot. "],["how-do-you-create-a-manhattan-plot-from-gwas-results-using-the-qqman-package.html", "Q&A 14 How do you create a Manhattan plot from GWAS results using the qqman package? 14.1 Explanation 14.2 R Code", " Q&A 14 How do you create a Manhattan plot from GWAS results using the qqman package? 14.1 Explanation The qqman package provides a convenient way to create Manhattan plots directly from GWAS result tables. A Manhattan plot displays each SNP‚Äôs ‚Äìlog10(p-value) along its genomic position, helping identify regions with strong associations. The function manhattan() expects a data frame with these key columns: CHR: Chromosome number BP: Base-pair position SNP: SNP identifier P: P-value from the association test You can prepare this by merging your GWAS result table with a .map file containing SNP positions. 14.2 R Code # Load required libraries library(tidyverse) library(qqman) # Step 1: Load GWAS results gwas_df &lt;- read_csv(&quot;data/gwas_results.csv&quot;) # Step 2: Load SNP position data (.map file) map_df &lt;- read_tsv(&quot;data/sativa413.map&quot;, col_names = c(&quot;CHR&quot;, &quot;SNP&quot;, &quot;GEN_DIST&quot;, &quot;BP&quot;), show_col_types = FALSE) # Step 3: Merge results with map data gwas_annotated &lt;- left_join(gwas_df, map_df, by = &quot;SNP&quot;) %&gt;% select(SNP, CHR, BP, P = P_value) %&gt;% drop_na() # Step 4: Create Manhattan plot using qqman manhattan(gwas_annotated, main = &quot;Manhattan Plot of GWAS Results&quot;, col = c(&quot;grey30&quot;, &quot;dodgerblue&quot;), cex = 0.6, cex.axis = 0.9, las = 1) ‚úÖ Takeaway: The qqman package offers a fast and simple way to create publication-ready Manhattan plots by plotting ‚Äìlog10(p-values) across the genome using SNP coordinates. "],["how-do-you-create-a-qq-plot-from-gwas-results-using-qqman-and-ggplot2.html", "Q&A 15 How do you create a QQ plot from GWAS results using qqman and ggplot2? 15.1 Explanation 15.2 A. Using the qqman package 15.3 B. Using ggplot2 for more control", " Q&A 15 How do you create a QQ plot from GWAS results using qqman and ggplot2? 15.1 Explanation A QQ (quantile‚Äìquantile) plot compares the distribution of observed p-values from a GWAS with the expected distribution under the null hypothesis. It is a diagnostic tool to detect population structure, inflation, or true associations. You can use: ‚úÖ qqman::qq() for a fast and simple plot ‚úÖ ggplot2 for customization and control over styling and annotations Both approaches produce a similar result but are suited to different use cases. 15.2 A. Using the qqman package # Load required libraries library(tidyverse) library(qqman) # Step 1: Load GWAS results gwas_df &lt;- read_csv(&quot;data/gwas_results.csv&quot;) # Step 2: Create QQ plot using qqman qq(gwas_df$P_value, main = &quot;QQ Plot of GWAS Results (qqman)&quot;) üü¢ Simple and fast, but limited in customization (no legend or theming) 15.3 B. Using ggplot2 for more control # Load required library library(tidyverse) # Step 1: Load GWAS results gwas_df &lt;- read_csv(&quot;data/gwas_results.csv&quot;) # Step 2: Calculate expected vs observed -log10(p) gwas_df &lt;- gwas_df %&gt;% filter(!is.na(P_value)) %&gt;% mutate(observed = -log10(sort(P_value)), expected = -log10(ppoints(n()))) # Step 3: Create QQ plot with reference line using ggplot2 ggplot(gwas_df, aes(x = expected, y = observed)) + geom_abline(slope = 1, intercept = 0, color = &quot;red&quot;, linetype = &quot;dashed&quot;) + geom_point(size = 1.2, alpha = 0.6, color = &quot;steelblue&quot;) + labs(title = &quot;QQ Plot of GWAS Results (ggplot2)&quot;, x = &quot;Expected -log10(p)&quot;, y = &quot;Observed -log10(p)&quot;) + theme_minimal(base_size = 14) ‚úÖ Takeaway: The red dashed line represents the expected distribution of p-values under the null hypothesis. Deviations above the line suggest potential true associations or population structure. Use qqman for simplicity or ggplot2 for full customization. "],["how-do-you-apply-multiple-testing-correction-to-gwas-results.html", "Q&A 16 How do you apply multiple testing correction to GWAS results? 16.1 Explanation 16.2 R Code 16.3 Interpretation", " Q&A 16 How do you apply multiple testing correction to GWAS results? 16.1 Explanation In GWAS, thousands of SNPs are tested for association with a trait. This increases the chance of false positives. To control this, we apply multiple testing correction methods such as: Bonferroni correction: Very strict; divides the alpha level (e.g., 0.05) by the number of tests False Discovery Rate (FDR): A more flexible method that controls the proportion of false positives among significant results (e.g., Benjamini-Hochberg) This helps identify statistically significant SNPs while accounting for the large number of tests. 16.2 R Code # Load required packages library(tidyverse) # Step 1: Load GWAS results gwas_df &lt;- read_csv(&quot;data/gwas_results.csv&quot;) # Step 2: Add Bonferroni-corrected threshold n_tests &lt;- nrow(gwas_df) bonf_threshold &lt;- 0.05 / n_tests # Step 3: Apply FDR correction using p.adjust gwas_df &lt;- gwas_df %&gt;% mutate(FDR = p.adjust(P_value, method = &quot;BH&quot;)) # Step 4: Extract significant SNPs significant_bonf &lt;- gwas_df %&gt;% filter(P_value &lt; bonf_threshold) significant_fdr &lt;- gwas_df %&gt;% filter(FDR &lt; 0.05) # Step 5: Output summary cat(&quot;Bonferroni threshold:&quot;, bonf_threshold, &quot;\\n&quot;) Bonferroni threshold: 1.331558e-05 cat(&quot;Number of SNPs passing Bonferroni:&quot;, nrow(significant_bonf), &quot;\\n&quot;) Number of SNPs passing Bonferroni: 250 cat(&quot;Number of SNPs passing FDR &lt; 0.05:&quot;, nrow(significant_fdr), &quot;\\n&quot;) Number of SNPs passing FDR &lt; 0.05: 1265 ‚úÖ Takeaway: Multiple testing correction is essential in GWAS. Bonferroni is strict but conservative, while FDR balances sensitivity and specificity. Always report how significance was determined. 16.3 Interpretation After applying multiple testing correction to the GWAS results: Bonferroni threshold: 1.331558e-05 This is the genome-wide significance level calculated by: alpha_bonf = 0.05 / 3755 ‚âà 1.33 √ó 10‚Åª‚Åµ Any SNP with a raw p-value below this threshold is considered highly significant, even under the strictest correction method (controlling the family-wise error rate). Number of SNPs passing Bonferroni: 250 These are the strongest associations, with extremely low p-values. They‚Äôre unlikely to be false positives and are good candidates for follow-up analysis or functional validation. Number of SNPs passing FDR &lt; 0.05: 1265 These SNPs are considered statistically significant under a False Discovery Rate (FDR) of 5%. This means that, on average, only 5% of these hits are expected to be false positives. It‚Äôs a more permissive method that helps capture broader signals. 16.3.1 Summary Table Correction Method Threshold Significant SNPs Interpretation Bonferroni 1.33e-05 250 Very strict; strong confidence FDR (BH) adjusted &lt; 0.05 1265 Balanced; allows more discovery, some risk ‚úÖ Takeaway: Use Bonferroni to identify high-confidence SNPs and FDR to explore additional signals while controlling the expected proportion of false positives. "],["how-do-you-create-a-volcano-plot-from-gwas-results-using-ggplot2.html", "Q&A 17 How do you create a volcano plot from GWAS results using ggplot2? 17.1 Explanation 17.2 R Code", " Q&A 17 How do you create a volcano plot from GWAS results using ggplot2? 17.1 Explanation A volcano plot is a powerful way to visualize both the effect size and statistical significance of SNPs in GWAS results. Each point represents a SNP, plotted by: X-axis: Effect size (regression coefficient) Y-axis: ‚Äìlog10(p-value), indicating significance This plot highlights SNPs with: - Large effect sizes - Low p-values (high significance) - Or both You can also add horizontal and vertical reference lines to help interpret thresholds. 17.2 R Code # Load required libraries library(tidyverse) # Step 1: Load GWAS results gwas_df &lt;- read_csv(&quot;data/gwas_results.csv&quot;) # Step 2: Compute ‚Äìlog10(p-value) gwas_df &lt;- gwas_df %&gt;% mutate(logP = -log10(P_value)) # Step 3: Create volcano plot ggplot(gwas_df, aes(x = Estimate, y = logP)) + geom_point(alpha = 0.6, color = &quot;grey40&quot;) + geom_hline(yintercept = -log10(0.05 / nrow(gwas_df)), linetype = &quot;dashed&quot;, color = &quot;red&quot;) + # Bonferroni line geom_vline(xintercept = 0, linetype = &quot;dotted&quot;, color = &quot;black&quot;) + # Null effect line labs(title = &quot;Volcano Plot of GWAS Results&quot;, x = &quot;Effect Size (Estimate)&quot;, y = expression(-log[10](p))) + theme_minimal(base_size = 14) # Add significance status gwas_df &lt;- gwas_df %&gt;% mutate(significant = P_value &lt; 0.05 / nrow(gwas_df)) # Re-plot with color by significance ggplot(gwas_df, aes(x = Estimate, y = logP, color = significant)) + geom_point(alpha = 0.7) + scale_color_manual(values = c(&quot;grey70&quot;, &quot;red&quot;)) + geom_hline(yintercept = -log10(0.05 / nrow(gwas_df)), linetype = &quot;dashed&quot;, color = &quot;red&quot;) + geom_vline(xintercept = 0, linetype = &quot;dotted&quot;, color = &quot;black&quot;) + labs(title = &quot;Volcano Plot with Bonferroni Threshold&quot;, x = &quot;Effect Size (Estimate)&quot;, y = expression(-log[10](p))) + theme_minimal(base_size = 14) + theme(legend.title = element_blank()) ‚úÖ Takeaway: A volcano plot shows the balance between effect size and significance. SNPs with both large effects and low p-values appear as extreme points in the top left or right quadrants. "],["how-do-you-identify-genome-wide-significant-snp-hits-and-save-them-for-downstream-analysis.html", "Q&A 18 How do you identify genome-wide significant SNP hits and save them for downstream analysis? 18.1 Explanation 18.2 R Code", " Q&A 18 How do you identify genome-wide significant SNP hits and save them for downstream analysis? 18.1 Explanation Once GWAS results are generated and corrected for multiple testing, the next step is to identify statistically significant SNPs. A common threshold is the Bonferroni-adjusted p-value, which accounts for the number of tests. You can: Filter SNPs below the Bonferroni threshold Annotate them with chromosome and base-pair position using the .map file Save the output for use in downstream steps like gene annotation or reporting 18.2 R Code # Load required libraries library(tidyverse) # Step 1: Load GWAS results gwas_df &lt;- read_csv(&quot;data/gwas_results.csv&quot;) # Step 2: Calculate Bonferroni threshold n_tests &lt;- nrow(gwas_df) bonf_threshold &lt;- 0.05 / n_tests # ‚âà 1.33e-05 for 3755 SNPs # Step 3: Filter significant hits significant_hits &lt;- gwas_df %&gt;% filter(P_value &lt; bonf_threshold) %&gt;% arrange(P_value) # Step 4: Load SNP position data map_df &lt;- read_tsv(&quot;data/sativa413.map&quot;, col_names = c(&quot;CHR&quot;, &quot;SNP&quot;, &quot;GEN_DIST&quot;, &quot;BP&quot;), show_col_types = FALSE) # Step 5: Annotate significant SNPs with position annotated_hits &lt;- left_join(significant_hits, map_df, by = &quot;SNP&quot;) %&gt;% select(SNP, CHR, BP, Estimate, P_value) # Step 6: Save for downstream analysis write_csv(annotated_hits, &quot;data/significant_snps_bonferroni.csv&quot;) # Step 7: Preview top hits head(annotated_hits, 10) # A tibble: 10 √ó 5 SNP CHR BP Estimate P_value &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 id1024159 1 38111539 -16.6 7.55e-19 2 ud10000717 10 11129237 19.6 2.02e-14 3 id10003000 10 11508505 17.7 1.10e-13 4 id6000791 6 905567 11.9 1.40e-12 5 id3010870 3 24492231 -12.2 1.50e-12 6 id2014431 2 32420895 19.3 3.05e-12 7 id1024488 1 38618456 11.5 3.51e-12 8 id11001027 11 3296722 14.5 3.53e-12 9 id1020565 1 33058921 -14.8 5.70e-12 10 id2001618 2 2873552 14.3 1.04e-11 ‚úÖ Takeaway: Identifying and saving genome-wide significant SNPs ensures a clean input for downstream analysis such as gene annotation, pathway mapping, or publication reporting. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
