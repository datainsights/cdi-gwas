[["index.html", "Genomics for Population Health ", " Genomics for Population Health | Last updated: July 01, 2025 "],["welcome-to-cdi-gwas-for-population-health.html", "Welcome to CDI ‚Äì GWAS for Population Health", " Welcome to CDI ‚Äì GWAS for Population Health Welcome to the Genome-Wide Association Studies (GWAS) Q&amp;A Guide, part of the Complex Data Insights (CDI) series. GWAS is a powerful approach used to identify genetic variants linked to traits and diseases across populations. By scanning the entire genome, GWAS helps researchers uncover associations between specific genetic markers (like SNPs) and observable traits ‚Äî such as height, cholesterol levels, asthma, diabetes, cancer risk, etc. ‚Äî across diverse populations. This guide focuses on the data-driven steps involved in conducting GWAS, from quality control and population structure analysis to association testing and interpretation. Using real genotype‚Äìphenotype datasets, you‚Äôll gain hands-on experience with tools like PLINK, R, and Python. GWAS plays a central role in population health genomics, supporting risk prediction, public health research, and equitable precision medicine ‚Äî especially when studies include diverse populations. Whether you‚Äôre preparing datasets, interpreting results, or exploring research applications, this guide helps you build your skills ‚Äî one question at a time. üåê The CDI Learning Path This guide is part of the Complex Data Insights (CDI) learning system ‚Äî a fully free and open-source project licensed under the MIT License. CDI breaks down complex topics into four progressive layers, designed to be explored individually or as an integrated journey: üîç EDA (Exploratory Data Analysis) Understand your data ‚Äî explore its structure, patterns, and quirks. üìä VIZ (Visualization) Communicate findings through clear and compelling visuals. üìê STATS (Statistical Analysis) Test hypotheses and quantify uncertainty using sound statistical methods. ü§ñ ML (Machine Learning) Build models to predict, classify, and uncover deeper insights. CDI helps you grow ‚Äî one Q&amp;A at a time. "],["how-do-you-create-a-gwas-project-directory-ready-for-analysis.html", "Q&A 1 How do you create a GWAS project directory ready for analysis? 1.1 Explanation 1.2 Bash (Terminal) 1.3 Python Code 1.4 R Code 1.5 Import libraries", " Q&A 1 How do you create a GWAS project directory ready for analysis? 1.1 Explanation Before working with data, it‚Äôs important to set up a clean and organized project directory. A consistent folder structure helps you manage scripts, datasets, and outputs across both Python and R ‚Äî making your work easier to follow and share. In this guide, we‚Äôll create a root directory called gwas-data-science with four folders: data/ ‚Äì for datasets scripts/ ‚Äì for code files images/ ‚Äì for plots and charts library/ ‚Äì for reusable functions Example Folder Structure: gwas-data-science/ ‚îú‚îÄ‚îÄ data/ ‚îú‚îÄ‚îÄ scripts/ ‚îú‚îÄ‚îÄ images/ ‚îî‚îÄ‚îÄ library/ 1.2 Bash (Terminal) You can create the entire structure using this single command: mkdir -p gwas-data-science/{data,scripts,images,library} cd gwas-data-science 1.3 Python Code You can also create the same folder structure in Python: import os folders = [&quot;data&quot;, &quot;scripts&quot;, &quot;images&quot;, &quot;library&quot;] root = &quot;gwas-data-science&quot; os.makedirs(root, exist_ok=True) for folder in folders: os.makedirs(os.path.join(root, folder), exist_ok=True) print(f&quot;Created &#39;{root}&#39; project folder with subdirectories.&quot;) 1.4 R Code Here‚Äôs how to do it in R: folders &lt;- c(&quot;data&quot;, &quot;scripts&quot;, &quot;images&quot;, &quot;library&quot;) root &lt;- &quot;gwas-data-science&quot; if (!dir.exists(root)) dir.create(root) for (folder in folders) { dir.create(file.path(root, folder), showWarnings = FALSE) } cat(&quot;Created&quot;, root, &quot;project folder with subdirectories.\\n&quot;) ‚úÖ A clean project directory helps you stay organized, reuse code, and avoid errors ‚Äî it‚Äôs the first step toward reproducible, professional data science. 1.5 Import libraries library(tidyverse) library(rrBLUP) library(BGLR) library(DT) library(SNPRelate) library(qqman) library(poolr) "],["how-do-you-prepare-a-public-gwas-dataset-for-r-based-analysis.html", "Q&A 2 How do you prepare a public GWAS dataset for R-based analysis? 2.1 Explanation", " Q&A 2 How do you prepare a public GWAS dataset for R-based analysis? 2.1 Explanation To support reproducible and cross-platform workflows, it‚Äôs helpful to separate raw data preparation from your analysis code. In this example, we use a Bash script to download and organize a publicly available rice diversity panel dataset from Zhao et al., 2011. The script performs the following steps: üì• Downloads PLINK-formatted genotype files (.ped, .map, .fam) üì¶ Unzips and flattens the directory structure for easy access üè∑Ô∏è Renames the phenotype file for clarity (sativa413_phenotypes.txt) üìÅ Moves all outputs into a consistent data/ directory with a sativa413_ prefix This setup creates a clean and well-organized foundation for downstream R-based GWAS analysis. ‚úÖ Takeaway: Using a Bash script to automate dataset download and organization keeps your R analysis environment clean, standardized, and fully reproducible. All required files are now available in the data/ folder under the sativa413_ prefix. "],["how-do-you-prepare-a-public-gwas-dataset-for-r-based-analysis-1.html", "Q&A 3 How do you prepare a public GWAS dataset for R-based analysis? 3.1 Explanation 3.2 Bash Script 3.3 File Structure", " Q&A 3 How do you prepare a public GWAS dataset for R-based analysis? 3.1 Explanation To support reproducible and cross-platform workflows, it‚Äôs helpful to separate raw data preparation from your analysis code. In this example, we use a Bash script to download and organize a publicly available rice diversity panel dataset from Zhao et al., 2011. The script performs the following steps: üì• Downloads PLINK-formatted genotype files (.ped, .map, .fam) üì¶ Unzips and flattens the directory structure for easy access üè∑Ô∏è Renames the phenotype file for clarity (sativa413_phenotypes.txt) üìÅ Moves all outputs into a consistent data/ directory with a sativa413_ prefix This setup creates a clean and well-organized foundation for downstream R-based GWAS analysis. 3.2 Bash Script #!/bin/bash # üöÄ Prepare rice GWAS genotype and phenotype data (PLINK format) # --- Paths and filenames --- ZIP_URL=&quot;http://ricediversity.org/data/sets/44kgwas/RiceDiversity.44K.MSU6.Genotypes_PLINK.zip&quot; ZIP_FILE=&quot;data/rice_gwas_genotypes.zip&quot; EXTRACT_DIR=&quot;data/RiceDiversity_44K_Genotypes_PLINK&quot; PHENO_URL=&quot;http://www.ricediversity.org/data/sets/44kgwas/RiceDiversity_44K_Phenotypes_34traits_PLINK.txt&quot; PHENO_OUT=&quot;data/sativa413_phenotypes.txt&quot; # --- Step 1: Ensure data folder exists --- mkdir -p data # --- Step 2: Download genotype zip file (if not already present) --- if [ ! -f &quot;$ZIP_FILE&quot; ]; then echo &quot;‚¨áÔ∏è Downloading genotype data...&quot; wget --no-check-certificate -O &quot;$ZIP_FILE&quot; &quot;$ZIP_URL&quot; else echo &quot;‚úÖ Genotype zip already exists: $ZIP_FILE&quot; fi # --- Step 3: Unzip genotype data --- echo &quot;üìÇ Extracting genotype files...&quot; unzip -o &quot;$ZIP_FILE&quot; -d data/ # --- Step 4: Move files up and clean nested folder --- if [ -d &quot;$EXTRACT_DIR&quot; ]; then mv &quot;$EXTRACT_DIR&quot;/* data/ rm -rf &quot;$EXTRACT_DIR&quot; fi rm -rf data/__MACOSX rm -f &quot;$ZIP_FILE&quot; # --- Step 5: Download phenotype file and rename --- echo &quot;‚¨áÔ∏è Downloading phenotype file...&quot; wget --no-check-certificate -P data/ &quot;$PHENO_URL&quot; mv data/RiceDiversity_44K_Phenotypes_34traits_PLINK.txt &quot;$PHENO_OUT&quot; echo &quot;‚úÖ GWAS data successfully prepared in the data/ folder.&quot; The Bash script is saved as: script/gwas_data.sh To run it: bash script/gwas_data.sh 3.3 File Structure After execution, the data/ folder contains: project/ ‚îú‚îÄ‚îÄ script/ ‚îÇ ‚îî‚îÄ‚îÄ gwas_data.sh ‚îî‚îÄ‚îÄ data/ ‚îú‚îÄ‚îÄ sativa413.map ‚îú‚îÄ‚îÄ sativa413.ped ‚îú‚îÄ‚îÄ sativa413.fam ‚îî‚îÄ‚îÄ sativa413_phenotypes.txt ‚úÖ Takeaway: Using a Bash script to automate dataset download and organization keeps your R analysis environment clean, standardized, and fully reproducible. All required files are now available in the data/ folder under the sativa413_ prefix. "],["how-do-you-efficiently-load-and-store-gwas-data-files-in-r.html", "Q&A 4 How do you efficiently load and store GWAS data files in R? 4.1 Explanation 4.2 R Code", " Q&A 4 How do you efficiently load and store GWAS data files in R? 4.1 Explanation GWAS datasets can be large, especially the genotype file in .ped format, which stores two columns per SNP. Repeatedly reading this file is time-consuming, so it‚Äôs best to: Load it once using readr::read_table() for speed and consistency. Save the loaded object as a compressed .rds file for fast future access. Load supporting metadata files (.map, .fam) and phenotype data using consistent column names. All files are stored in the data/ directory and prefixed with sativa413_. 4.2 R Code library(tidyverse) # Step 1: Load genotype data using readr ped_data &lt;- read_table(&quot;data/sativas413.ped&quot;, col_names = FALSE, show_col_types = FALSE) # Step 2: Save as compressed RDS file write_rds(ped_data, file = &quot;data/sativa413.rds&quot;) # Step 3: Load metadata files map_data &lt;- read_table(&quot;data/sativas413.map&quot;, col_names = c(&quot;chr&quot;, &quot;snp_id&quot;, &quot;gen_dist&quot;, &quot;bp_pos&quot;), show_col_types = FALSE) fam_data &lt;- read_table(&quot;data/sativas413.fam&quot;, col_names = c(&quot;FID&quot;, &quot;IID&quot;, &quot;PID&quot;, &quot;MID&quot;, &quot;sex&quot;, &quot;phenotype&quot;), show_col_types = FALSE) phenotype_data &lt;- read_tsv(&quot;data/sativa413_phenotypes.txt&quot;, show_col_types = FALSE) ‚úÖ Takeaway: For large genotype files, load once using readr, save as .rds, and always use clear column names when importing metadata and phenotype files to streamline analysis and ensure reproducibility. "],["how-do-you-inspect-the-structure-and-contents-of-gwas-input-files-in-r.html", "Q&A 5 How do you inspect the structure and contents of GWAS input files in R? 5.1 Explanation 5.2 R Code", " Q&A 5 How do you inspect the structure and contents of GWAS input files in R? 5.1 Explanation Before analysis, it‚Äôs essential to preview each file to check: Row and column dimensions Sample ID consistency General format of genotype and phenotype data This ensures everything is aligned before tidying or merging. 5.2 R Code # Load genotype file (if needed) ped_data &lt;- read_rds(&quot;data/sativa413.rds&quot;) # Check size of each file dim(ped_data) # Genotype matrix [1] 413 73808 dim(map_data) # SNP metadata [1] 36901 4 dim(fam_data) # Sample info [1] 413 6 dim(phenotype_data) # Trait info [1] 413 38 # Preview first few rows and columns head(ped_data[, 1:5]) # First 5 genotype columns (show alleles) # A tibble: 6 √ó 5 X1 X2 X3 X4 X5 &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 081215-A05 1 0 0 -9 2 081215-A06 3 0 0 -9 3 081215-A07 4 0 0 -9 4 081215-A08 5 0 0 -9 5 090414-A09 6 0 0 -9 6 090414-A10 7 0 0 -9 head(map_data) # A tibble: 6 √ó 4 chr snp_id gen_dist bp_pos &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 id1000001 0 13147 2 1 id1000003 0 73192 3 1 id1000005 0 74969 4 1 id1000007 0 75852 5 1 id1000008 0 75953 6 1 id1000011 0 91016 head(fam_data[, 1:5]) # A tibble: 6 √ó 5 FID IID PID MID sex &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 081215-A05 1 0 0 -9 2 081215-A06 3 0 0 -9 3 081215-A07 4 0 0 -9 4 081215-A08 5 0 0 -9 5 090414-A09 6 0 0 -9 6 090414-A10 7 0 0 -9 head(phenotype_data[, 1:5]) # A tibble: 6 √ó 5 HybID NSFTVID `Flowering time at Arkansas` `Flowering time at Faridpur` &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 081215-A05 1 75.1 64 2 081215-A06 3 89.5 66 3 081215-A07 4 94.5 67 4 081215-A08 5 87.5 70 5 090414-A09 6 89.1 73 6 090414-A10 7 105 NA # ‚Ñπ 1 more variable: `Flowering time at Aberdeen` &lt;dbl&gt; ‚úÖ Takeaway: Use dim() and head() to quickly check file structure and confirm that samples and traits align before transforming or analyzing GWAS data. "],["how-do-you-tidy-the-genotype-matrix-from-a-.ped-file-in-r.html", "Q&A 6 How do you tidy the genotype matrix from a .ped file in R? 6.1 Explanation 6.2 R Code", " Q&A 6 How do you tidy the genotype matrix from a .ped file in R? 6.1 Explanation PLINK .ped files store genotype data in a wide format, where each SNP is represented by two columns per individual (one for each allele). This structure is inefficient for downstream analysis, so we convert it to a tidy format where: Each row represents one sample Each column represents one SNP Alleles are combined (e.g., \"A A\", \"A G\", \"G G\") We also use SNP metadata from the .map file ‚Äî now consistently referred to as snp_info ‚Äî to label the columns. 6.2 R Code # Load necessary library library(tidyverse) # Step 1: Load genotype and SNP info (if not already in memory) ped_data &lt;- read_rds(&quot;data/sativa413.rds&quot;) snp_info &lt;- read_table(&quot;data/sativas413.map&quot;, col_names = c(&quot;chr&quot;, &quot;snp_id&quot;, &quot;gen_dist&quot;, &quot;bp_pos&quot;), show_col_types = FALSE) # Step 2: Separate sample IDs and genotype calls sample_ids &lt;- ped_data[, 1:2] # FID and IID genotype_matrix &lt;- ped_data[, -(1:6)] # Alleles only # Step 3: Verify expected SNP count n_snps &lt;- ncol(genotype_matrix) / 2 stopifnot(n_snps == nrow(snp_info)) # Step 4: Combine each pair of allele columns into genotype strings genotype_calls &lt;- map_dfc(seq(1, ncol(genotype_matrix), by = 2), function(i) { paste(genotype_matrix[[i]], genotype_matrix[[i + 1]]) }) names(genotype_calls) &lt;- snp_info$snp_id # Use SNP IDs as column names # Step 5: Combine with sample IDs genotype_tidy &lt;- bind_cols(sample_ids, genotype_calls) # Step 6: Preview output head(genotype_tidy[1:10, 1:5]) # Show FID, IID, and first 8 SNPs # A tibble: 6 √ó 5 X1 X2 id1000001 id1000003 id1000005 &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 081215-A05 1 T T T T C C 2 081215-A06 3 C C C C C C 3 081215-A07 4 C C C C C C 4 081215-A08 5 C C C C T T 5 090414-A09 6 C C C C C C 6 090414-A10 7 T T T T C C glimpse(genotype_tidy[1:5, 1:10]) # Show FID, IID, and first 8 SNPs Rows: 5 Columns: 10 $ X1 &lt;chr&gt; &quot;081215-A05&quot;, &quot;081215-A06&quot;, &quot;081215-A07&quot;, &quot;081215-A08&quot;, &quot;090‚Ä¶ $ X2 &lt;dbl&gt; 1, 3, 4, 5, 6 $ id1000001 &lt;chr&gt; &quot;T T&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot; $ id1000003 &lt;chr&gt; &quot;T T&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot; $ id1000005 &lt;chr&gt; &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;T T&quot;, &quot;C C&quot; $ id1000007 &lt;chr&gt; &quot;G G&quot;, &quot;A A&quot;, &quot;A A&quot;, &quot;G G&quot;, &quot;A A&quot; $ id1000008 &lt;chr&gt; &quot;T T&quot;, &quot;G G&quot;, &quot;G G&quot;, &quot;G G&quot;, &quot;G G&quot; $ id1000011 &lt;chr&gt; &quot;A A&quot;, &quot;0 0&quot;, &quot;G G&quot;, &quot;A A&quot;, &quot;G G&quot; $ id1000013 &lt;chr&gt; &quot;C C&quot;, &quot;C C&quot;, &quot;C C&quot;, &quot;T T&quot;, &quot;C C&quot; $ id1000015 &lt;chr&gt; &quot;T T&quot;, &quot;G G&quot;, &quot;G G&quot;, &quot;G G&quot;, &quot;G G&quot; ‚úÖ Takeaway: Tidying .ped genotype data into a clean sample-by-SNP format makes it much easier to analyze, visualize, or convert to numeric dosages. Use snp_info consistently as the SNP metadata reference to avoid conflicts. "],["how-do-you-recode-allele-strings-into-numeric-count-format-for-gwas.html", "Q&A 7 How do you recode allele strings into numeric count format for GWAS? 7.1 Explanation 7.2 R Code", " Q&A 7 How do you recode allele strings into numeric count format for GWAS? 7.1 Explanation After tidying the .ped genotype matrix into a clean format where each SNP column contains values like \"A A\", \"A G\", or \"G G\", most GWAS tools require those genotypes to be numeric: Genotype count format: - 0 = Homozygous for major allele - 1 = Heterozygous - 2 = Homozygous for minor allele - NA = Missing or uncalled genotype To do this, we: Identify the two alleles observed at each SNP Determine the minor allele (less frequent) Count how many copies of the minor allele each individual has (0, 1, or 2) ‚úÖ Clarifying the structure of the genotype matrix: Each pair of alleles (like \"A G\", \"G G\", \"T C\") represents a genotype for a single SNP in a single individual. So when you load the .ped file and separate it into allele pairs: Each pair = one genotype Each column = one SNP Each row = one sample üß† This distinction is important when converting genotype strings to numeric formats for GWAS. 7.2 R Code # Load libraries library(tidyverse) # Step 1: Drop FID and IID from genotype_tidy to isolate genotype columns geno_alleles &lt;- genotype_tidy[, -c(1, 2)] # Step 2: Convert allele strings to numeric minor allele counts geno_minor_allele_count &lt;- map_dfc(geno_alleles, function(allele_vec) { # Split all genotype strings (e.g., &quot;A G&quot;) into individual alleles alleles &lt;- unlist(str_split(allele_vec, &quot; &quot;)) allele_counts &lt;- table(alleles) # Skip SNPs that are monomorphic or malformed if (length(allele_counts) &lt; 2) return(rep(NA, length(allele_vec))) # Identify the minor allele (less frequent) minor_allele &lt;- names(sort(allele_counts))[1] # Count how many copies of the minor allele are in each genotype sapply(allele_vec, function(gt) { if (gt %in% c(&quot;0 0&quot;, &quot;0 1&quot;, &quot;1 0&quot;, &quot;1 1&quot;, &quot;0&quot;, &quot;1&quot;)) return(NA) # filter malformed split_alleles &lt;- unlist(str_split(gt, &quot; &quot;)) if (length(split_alleles) != 2) return(NA) sum(split_alleles == minor_allele) }) }) # Step 3: Add back sample identifiers genotype_count &lt;- bind_cols(genotype_tidy[, 1:2], geno_minor_allele_count) # Step 4: Preview the cleaned matrix glimpse(genotype_count[, 1:5]) Rows: 413 Columns: 5 $ X1 &lt;chr&gt; &quot;081215-A05&quot;, &quot;081215-A06&quot;, &quot;081215-A07&quot;, &quot;081215-A08&quot;, &quot;090‚Ä¶ $ X2 &lt;dbl&gt; 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, ‚Ä¶ $ id1000001 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶ $ id1000003 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶ $ id1000005 &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶ ‚úÖ Takeaway: Recoding genotype strings into numeric dosages (0, 1, 2) is essential for statistical GWAS models. It standardizes input and prepares your data for PCA, association testing, or genomic prediction. "],["how-do-you-filter-snps-and-samples-based-on-missing-data-and-minor-allele-frequency-how-do-you-filter-genotype-data-for-missingness-and-minor-allele-frequency.html", "Q&A 8 How do you filter SNPs and samples based on missing data and minor allele frequency?# How do you filter genotype data for missingness and minor allele frequency? 8.1 Explanation 8.2 R Code", " Q&A 8 How do you filter SNPs and samples based on missing data and minor allele frequency?# How do you filter genotype data for missingness and minor allele frequency? 8.1 Explanation Before running GWAS, it‚Äôs important to apply basic quality control (QC) to the genotype matrix. This ensures that: SNPs with too many missing genotypes are excluded SNPs with very low variability (low minor allele frequency) are removed Samples with excessive missing data (optional) are filtered out These steps improve statistical power and reduce false associations. 8.2 R Code # Load required libraries library(tidyverse) # Step 1: Remove sample columns (FID, IID) count_only &lt;- genotype_count[, -c(1, 2)] # Step 2: Filter SNPs by missingness (e.g., keep SNPs with &lt;10% missing values) snp_missing &lt;- colMeans(is.na(count_only)) snp_keep &lt;- names(snp_missing[snp_missing &lt; 0.1]) filtered_count &lt;- count_only[, snp_keep] # Step 3: Filter SNPs by minor allele frequency (MAF &gt;= 0.05) calc_maf &lt;- function(x) { p &lt;- mean(x, na.rm = TRUE) / 2 min(p, 1 - p) } snp_maf &lt;- map_dbl(filtered_count, calc_maf) maf_keep &lt;- names(snp_maf[snp_maf &gt;= 0.05]) final_count &lt;- filtered_count[, maf_keep] # Step 4: Reattach FID and IID filtered_geno &lt;- bind_cols(genotype_count[, 1:2], final_count) # Step 5: Summary of filtering cat(&quot;Original SNPs:&quot;, ncol(count_only), &quot;\\n&quot;) Original SNPs: 36901 cat(&quot;After missing filter:&quot;, length(snp_keep), &quot;\\n&quot;) After missing filter: 31443 cat(&quot;After MAF filter:&quot;, length(maf_keep), &quot;\\n&quot;) After MAF filter: 3755 ‚úÖ Takeaway: Apply SNP-level filters for missing data and low MAF to improve data quality. This ensures that only informative and reliable markers are used in your GWAS analysis. "],["how-do-you-impute-missing-genotype-values-before-gwas-analysis.html", "Q&A 9 How do you impute missing genotype values before GWAS analysis? 9.1 Explanation 9.2 R Code", " Q&A 9 How do you impute missing genotype values before GWAS analysis? 9.1 Explanation Many GWAS and population structure methods (like PCA or kinship matrix computation) require complete genotype matrices. If you have filtered for missingness but still have a few NA values, a simple approach is to impute missing genotypes using the mean dosage for each SNP. This is fast, reproducible, and good enough for visualization and many linear models. 9.2 R Code # Load library library(tidyverse) # Step 1: Extract dosage matrix (without FID/IID) dosage_matrix &lt;- filtered_geno[, -c(1, 2)] # Step 2: Impute missing values using column means imputed_matrix &lt;- dosage_matrix %&gt;% mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) # Step 3: Add back FID and IID geno_imputed &lt;- bind_cols(filtered_geno[, 1:2], imputed_matrix) # Step 4: Preview head(geno_imputed[, 1:5]) # A tibble: 6 √ó 5 X1 X2 id1000007 id1000051 id1000080 &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; 1 081215-A05 1 0 0 0 2 081215-A06 3 2 0 2 3 081215-A07 4 2 0 2 4 081215-A08 5 0 0 2 5 090414-A09 6 2 0 2 6 090414-A10 7 0 0 0 glimpse(geno_imputed[1:5, 1:10]) Rows: 5 Columns: 10 $ X1 &lt;chr&gt; &quot;081215-A05&quot;, &quot;081215-A06&quot;, &quot;081215-A07&quot;, &quot;081215-A08&quot;, &quot;090‚Ä¶ $ X2 &lt;dbl&gt; 1, 3, 4, 5, 6 $ id1000007 &lt;int&gt; 0, 2, 2, 0, 2 $ id1000051 &lt;int&gt; 0, 0, 0, 0, 0 $ id1000080 &lt;int&gt; 0, 2, 2, 2, 2 $ id1000091 &lt;int&gt; 0, 2, 2, 0, 2 $ id1000093 &lt;int&gt; 0, 2, 2, 2, 2 $ id1000115 &lt;int&gt; 0, 0, 0, 2, 0 $ ud1000033 &lt;dbl&gt; 0, 0, 0, 0, 0 $ id1000264 &lt;int&gt; 0, 2, 0, 0, 0 ‚úÖ Takeaway: Simple mean imputation fills missing genotype values efficiently. It‚Äôs suitable for PCA, kinship, and linear models when high accuracy isn‚Äôt critical or when advanced imputation isn‚Äôt available. "],["how-do-you-perform-pca-on-genotype-data-to-assess-population-structure.html", "Q&A 10 How do you perform PCA on genotype data to assess population structure? 10.1 Explanation 10.2 R Code", " Q&A 10 How do you perform PCA on genotype data to assess population structure? 10.1 Explanation PCA (Principal Component Analysis) is a standard method to explore genetic diversity and detect hidden population structure in GWAS datasets. It helps: Control for confounding due to stratification Visualize sample clusters or outliers Generate covariates (PC1, PC2, etc.) for use in association models We apply PCA on the imputed genotype dosage matrix, excluding identifier columns (FID, IID), and then combine the results with sample IDs. 10.2 R Code # Load libraries library(tidyverse) # Step 1: Extract genotype matrix (exclude FID and IID) geno_numeric &lt;- geno_imputed[, -c(1, 2)] # Step 2: Perform PCA using prcomp pca_result &lt;- prcomp(geno_numeric, center = TRUE, scale. = TRUE) # Step 3: Combine first 5 PCs with sample IDs pca_df &lt;- geno_imputed[, 1:2] %&gt;% # FID and IID bind_cols(as_tibble(pca_result$x[, 1:5])) # PC1 to PC5 # Step 4: Plot PC1 vs PC2 ggplot(pca_df, aes(x = PC1, y = PC2)) + geom_point(size = 2, alpha = 0.7) + labs(title = &quot;PCA of Genotype Data&quot;, x = &quot;PC1&quot;, y = &quot;PC2&quot;) + theme_minimal() ‚úÖ Takeaway: PCA helps uncover hidden structure in your GWAS population. Always reattach FID and IID to PCA scores so they can be merged with phenotype and genotype metadata for downstream modeling. "],["how-do-you-include-pca-covariates-in-a-gwas-model.html", "Q&A 11 How do you include PCA covariates in a GWAS model? 11.1 Explanation 11.2 R Code", " Q&A 11 How do you include PCA covariates in a GWAS model? 11.1 Explanation To reduce false positives caused by hidden genetic structure, it‚Äôs standard in GWAS to include the top principal components (PCs) as covariates in the model. These PCs come from PCA applied to the genotype matrix and must be matched back to each sample using the same identifiers (FID, IID). This Q&amp;A walks through the process of combining phenotype, PCA, and genotype data, then fitting a single SNP-trait association model. 11.2 R Code # Load libraries library(tidyverse) # Step 1: Load and align phenotype data with sample metadata (by FID) fam_data &lt;- read_table(&quot;data/sativas413.fam&quot;, col_names = c(&quot;FID&quot;, &quot;IID&quot;, &quot;PID&quot;, &quot;MID&quot;, &quot;sex&quot;, &quot;phenotype&quot;), show_col_types = FALSE) phenotype_data &lt;- read_tsv(&quot;data/sativa413_phenotypes.txt&quot;, show_col_types = FALSE) %&gt;% rename(FID = 1) # Sample IDs in phenotype file match fam_data$FID sample_metadata &lt;- left_join(fam_data, phenotype_data, by = &quot;FID&quot;) # Step 2: Rename PCA columns to include proper IDs pca_df &lt;- pca_df %&gt;% rename(FID = 1, IID = 2) # Step 3: Merge PCA data into sample metadata sample_data &lt;- left_join(sample_metadata, pca_df, by = c(&quot;FID&quot;, &quot;IID&quot;)) # Step 4: Standardize ID columns in genotype data geno_imputed &lt;- geno_imputed %&gt;% rename(FID = 1, IID = 2) # Step 5: Merge genotype with metadata geno_data &lt;- geno_imputed[, -1] # Drop FID, keep IID and SNPs gwas_input &lt;- left_join(sample_data, geno_data, by = &quot;IID&quot;) # Step 6: Select trait and covariates trait &lt;- &quot;Plant height&quot; # Use the column name as a string covariates &lt;- c(&quot;PC1&quot;, &quot;PC2&quot;, &quot;PC3&quot;) # Step 7: Construct the model formula snp_name &lt;- names(geno_data)[2] # Replace with desired SNP formula_str &lt;- paste0(&quot;`&quot;, trait, &quot;` ~ &quot;, snp_name, &quot; + &quot;, paste(covariates, collapse = &quot; + &quot;)) model &lt;- lm(as.formula(formula_str), data = gwas_input) # Step 8: View model summary summary(model) Call: lm(formula = as.formula(formula_str), data = gwas_input) Residuals: Min 1Q Median 3Q Max -54.024 -12.429 -0.346 11.594 76.555 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 115.83448 1.04707 110.627 &lt; 2e-16 *** id1000007 2.17767 1.54100 1.413 0.158 PC1 0.20502 0.02761 7.426 7.49e-13 *** PC2 -0.19534 0.04436 -4.404 1.39e-05 *** PC3 -0.29738 0.07399 -4.019 7.05e-05 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 18.63 on 378 degrees of freedom (30 observations deleted due to missingness) Multiple R-squared: 0.2277, Adjusted R-squared: 0.2195 F-statistic: 27.86 on 4 and 378 DF, p-value: &lt; 2.2e-16 ‚úÖ Takeaway: Always ensure PCA scores include correctly labeled FID and IID so they can be merged with metadata and genotype matrices before fitting GWAS models. "],["how-do-you-interpret-gwas-model-results-with-pca-covariates.html", "Q&A 12 How do you interpret GWAS model results with PCA covariates? 12.1 Explanation 12.2 R Model Output Summary", " Q&A 12 How do you interpret GWAS model results with PCA covariates? 12.1 Explanation Once a GWAS model is fitted using a phenotype (e.g., Plant height), a SNP, and population structure covariates (e.g., PC1‚ÄìPC3), we interpret the results using the model summary. The key values to look for are: Estimate: The effect size of each variable Pr(&gt;|t|): The p-value, used to determine significance R-squared: The proportion of variation in the trait explained by the model Residuals: The spread of errors not explained by the model This example tests the association between SNP id1000007 and Plant height, adjusting for PC1 to PC3. 12.2 R Model Output Summary Coefficient Estimate Std. Error t value Pr(&gt; t (Intercept) 115.83448 1.04707 110.63 &lt; 2e-16 *** id1000007 2.17767 1.54100 1.413 0.158 PC1 0.20502 0.02761 7.426 7.49e-13 *** PC2 -0.19534 0.04436 -4.404 1.39e-05 *** PC3 -0.29738 0.07399 -4.019 7.05e-05 *** Model Fit: Residual standard error: 18.63 Degrees of freedom: 378 R-squared: 0.2277 Adjusted R-squared: 0.2195 F-statistic: 27.86 on 4 and 378 DF Overall p-value: &lt; 2.2e-16 ‚úÖ Takeaway: This SNP is not significant (p = 0.158), but PCs show strong association with plant height. Controlling for population structure is essential to avoid false signals in GWAS. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
